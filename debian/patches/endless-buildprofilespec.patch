From 1204b65e186ab28afb814c9b129645d542d3c780 Mon Sep 17 00:00:00 2001
From: Bob Ham <bob.ham@collabora.com>
Date: Mon, 14 Mar 2016 17:12:22 +0000
Subject: [PATCH] Build: Add support for :native arch specifiers and build
 profiles

Support Build-Depends such as the following:

  g++-multilib [amd64 armel armhf i386 kfreebsd-amd64 mips mips64 mips64el mipsel mipsn32 mipsn32el powerpc ppc64 s390 s390x sparc sparc64 x32] <!cross>
  g++-5-x86-64-linux-gnu [amd64] <cross>
  binutils:native (>= 2.25.90) | binutils-multiarch:native (>= 2.25.90)

We just ignore :native, as with :any, but pay attention to the build
profile formulae.  We simply use an empty build profile set for now,
which works appropriately with <cross>, <!cross>, <stage1>, <!stage1>,
etc.

Signed-off-by: Bob Ham <bob.ham@collabora.com>
---
 Build/Deb.pm | 25 ++++++++++++++++++++++---
 1 file changed, 22 insertions(+), 3 deletions(-)

Index: obs-build/Build/Deb.pm
===================================================================
--- obs-build.orig/Build/Deb.pm
+++ obs-build/Build/Deb.pm
@@ -99,6 +99,25 @@ sub parse {
         my @alts = split('\s*\|\s*', $d);
         my @needed;
         for my $c (@alts) {
+          if ($c =~ /\s+<[^>]+>$/) {
+            my @build_profiles;  # Empty for now
+            my $bad = 1;
+            while ($c =~ s/\s+<([^>]+)>$//) {
+              next if (!$bad);
+              my $list_valid = 1;
+              for my $term (split(/\s+/, $1)) {
+                my $isneg = ($term =~ s/^\!//);
+                my $profile_match = grep(/^$term$/, @build_profiles);
+                if (( $profile_match &&  $isneg) ||
+                    (!$profile_match && !$isneg)) {
+                  $list_valid = 0;
+                  last;
+                }
+              }
+              $bad = 0 if ($list_valid);
+            }
+            next if ($bad);
+          }
           if ($c =~ /^(.*?)\s*\[(.*)\]$/) {
             $c = $1;
             my $isneg = 0;
@@ -115,12 +134,10 @@ sub parse {
                 $bad = 0;
               }
             }
-            $c =~ s/^([^:\s]*):any(.*)$/$1$2/;
-            push @needed, $c unless $bad;
-          } else {
-            $c =~ s/^([^:\s]*):any(.*)$/$1$2/;
-            push @needed, $c;
+            next if ($bad);
           }
+          $c =~ s/^([^:\s]*):(any|native)(.*)$/$1$3/;
+          push @needed, $c;
         }
         next unless @needed;
         $d = join(' | ', @needed);
